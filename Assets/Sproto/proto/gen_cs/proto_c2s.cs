// Generated by sprotodump. DO NOT EDIT!
// source: E:\work\project\unity\panel_attack\Assets\Sproto\proto\/proto.c2s.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace SprotoType { 
	public class block_info : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private Int64 _row; // tag 0
		public Int64 row {
			get { return _row; }
			set { base.has_field.set_field (0, true); _row = value; }
		}
		public bool HasRow {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _col; // tag 1
		public Int64 col {
			get { return _col; }
			set { base.has_field.set_field (1, true); _col = value; }
		}
		public bool HasCol {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _type; // tag 2
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (2, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (2); }
		}

		public block_info () : base(max_field_count) {}

		public block_info (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.row = base.deserialize.read_integer ();
					break;
				case 1:
					this.col = base.deserialize.read_integer ();
					break;
				case 2:
					this.type = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.row, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.col, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.type, 2);
			}

			return base.serialize.close ();
		}
	}


	public class game_auth {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _uid; // tag 0
			public string uid {
				get { return _uid; }
				set { base.has_field.set_field (0, true); _uid = value; }
			}
			public bool HasUid {
				get { return base.has_field.has_field (0); }
			}

			private string _version; // tag 1
			public string version {
				get { return _version; }
				set { base.has_field.set_field (1, true); _version = value; }
			}
			public bool HasVersion {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.uid = base.deserialize.read_string ();
						break;
					case 1:
						this.version = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.uid, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.version, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			private string _rid; // tag 1
			public string rid {
				get { return _rid; }
				set { base.has_field.set_field (1, true); _rid = value; }
			}
			public bool HasRid {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _server_time; // tag 2
			public Int64 server_time {
				get { return _server_time; }
				set { base.has_field.set_field (2, true); _server_time = value; }
			}
			public bool HasServer_time {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					case 1:
						this.rid = base.deserialize.read_string ();
						break;
					case 2:
						this.server_time = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.rid, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.server_time, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_over {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _winner; // tag 1
			public string winner {
				get { return _winner; }
				set { base.has_field.set_field (0, true); _winner = value; }
			}
			public bool HasWinner {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 1:
						this.winner = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.winner, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_ready {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private List<block_info> _init_matrix; // tag 0
			public List<block_info> init_matrix {
				get { return _init_matrix; }
				set { base.has_field.set_field (0, true); _init_matrix = value; }
			}
			public bool HasInit_matrix {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.init_matrix = base.deserialize.read_obj_list<block_info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.init_matrix, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_start {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _start_time; // tag 0
			public Int64 start_time {
				get { return _start_time; }
				set { base.has_field.set_field (0, true); _start_time = value; }
			}
			public bool HasStart_time {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.start_time = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.start_time, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class init_data {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private List<block_info> _matrix; // tag 0
			public List<block_info> matrix {
				get { return _matrix; }
				set { base.has_field.set_field (0, true); _matrix = value; }
			}
			public bool HasMatrix {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.matrix = base.deserialize.read_obj_list<block_info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.matrix, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class key_value : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _id; // tag 0
		public Int64 id {
			get { return _id; }
			set { base.has_field.set_field (0, true); _id = value; }
		}
		public bool HasId {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _value; // tag 1
		public Int64 value {
			get { return _value; }
			set { base.has_field.set_field (1, true); _value = value; }
		}
		public bool HasValue {
			get { return base.has_field.has_field (1); }
		}

		public key_value () : base(max_field_count) {}

		public key_value (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.id = base.deserialize.read_integer ();
					break;
				case 1:
					this.value = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.id, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.value, 1);
			}

			return base.serialize.close ();
		}
	}


	public class login {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _rid; // tag 0
			public string rid {
				get { return _rid; }
				set { base.has_field.set_field (0, true); _rid = value; }
			}
			public bool HasRid {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.rid = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.rid, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class match {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class match_success {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private string _game_id; // tag 0
			public string game_id {
				get { return _game_id; }
				set { base.has_field.set_field (0, true); _game_id = value; }
			}
			public bool HasGame_id {
				get { return base.has_field.has_field (0); }
			}

			private string _rival_rid; // tag 1
			public string rival_rid {
				get { return _rival_rid; }
				set { base.has_field.set_field (1, true); _rival_rid = value; }
			}
			public bool HasRival_rid {
				get { return base.has_field.has_field (1); }
			}

			private string _rival_rname; // tag 2
			public string rival_rname {
				get { return _rival_rname; }
				set { base.has_field.set_field (2, true); _rival_rname = value; }
			}
			public bool HasRival_rname {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.game_id = base.deserialize.read_string ();
						break;
					case 1:
						this.rival_rid = base.deserialize.read_string ();
						break;
					case 2:
						this.rival_rname = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.game_id, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.rival_rid, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_string (this.rival_rname, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class match_timeout {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


	}


	public class match_wrong {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _type; // tag 0
			public Int64 type {
				get { return _type; }
				set { base.has_field.set_field (0, true); _type = value; }
			}
			public bool HasType {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.type = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.type, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class new_row {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private List<block_info> _row_data; // tag 0
			public List<block_info> row_data {
				get { return _row_data; }
				set { base.has_field.set_field (0, true); _row_data = value; }
			}
			public bool HasRow_data {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _cur_row_cnt; // tag 1
			public Int64 cur_row_cnt {
				get { return _cur_row_cnt; }
				set { base.has_field.set_field (1, true); _cur_row_cnt = value; }
			}
			public bool HasCur_row_cnt {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _total_row_cnt; // tag 2
			public Int64 total_row_cnt {
				get { return _total_row_cnt; }
				set { base.has_field.set_field (2, true); _total_row_cnt = value; }
			}
			public bool HasTotal_row_cnt {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.row_data = base.deserialize.read_obj_list<block_info> ();
						break;
					case 1:
						this.cur_row_cnt = base.deserialize.read_integer ();
						break;
					case 2:
						this.total_row_cnt = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.row_data, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.cur_row_cnt, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.total_row_cnt, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		private string _ud; // tag 2
		public string ud {
			get { return _ud; }
			set { base.has_field.set_field (2, true); _ud = value; }
		}
		public bool HasUd {
			get { return base.has_field.has_field (2); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				case 2:
					this.ud = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_string (this.ud, 2);
			}

			return base.serialize.close ();
		}
	}


	public class ping {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _server_time; // tag 0
			public Int64 server_time {
				get { return _server_time; }
				set { base.has_field.set_field (0, true); _server_time = value; }
			}
			public bool HasServer_time {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.server_time = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.server_time, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class score {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _score; // tag 0
			public Int64 score {
				get { return _score; }
				set { base.has_field.set_field (0, true); _score = value; }
			}
			public bool HasScore {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _combo_cnt; // tag 1
			public Int64 combo_cnt {
				get { return _combo_cnt; }
				set { base.has_field.set_field (1, true); _combo_cnt = value; }
			}
			public bool HasCombo_cnt {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.score = base.deserialize.read_integer ();
						break;
					case 1:
						this.combo_cnt = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.score, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.combo_cnt, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class swap_block {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private block_info _block1; // tag 0
			public block_info block1 {
				get { return _block1; }
				set { base.has_field.set_field (0, true); _block1 = value; }
			}
			public bool HasBlock1 {
				get { return base.has_field.has_field (0); }
			}

			private block_info _block2; // tag 1
			public block_info block2 {
				get { return _block2; }
				set { base.has_field.set_field (1, true); _block2 = value; }
			}
			public bool HasBlock2 {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.block1 = base.deserialize.read_obj<block_info> ();
						break;
					case 1:
						this.block2 = base.deserialize.read_obj<block_info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.block1, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.block2, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class sync_new_row {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private List<block_info> _row_data; // tag 0
			public List<block_info> row_data {
				get { return _row_data; }
				set { base.has_field.set_field (0, true); _row_data = value; }
			}
			public bool HasRow_data {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _cur_row_cnt; // tag 1
			public Int64 cur_row_cnt {
				get { return _cur_row_cnt; }
				set { base.has_field.set_field (1, true); _cur_row_cnt = value; }
			}
			public bool HasCur_row_cnt {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _total_row_cnt; // tag 2
			public Int64 total_row_cnt {
				get { return _total_row_cnt; }
				set { base.has_field.set_field (2, true); _total_row_cnt = value; }
			}
			public bool HasTotal_row_cnt {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.row_data = base.deserialize.read_obj_list<block_info> ();
						break;
					case 1:
						this.cur_row_cnt = base.deserialize.read_integer ();
						break;
					case 2:
						this.total_row_cnt = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.row_data, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.cur_row_cnt, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.total_row_cnt, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class sync_score {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private string _id; // tag 0
			public string id {
				get { return _id; }
				set { base.has_field.set_field (0, true); _id = value; }
			}
			public bool HasId {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _score; // tag 1
			public Int64 score {
				get { return _score; }
				set { base.has_field.set_field (1, true); _score = value; }
			}
			public bool HasScore {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _combo_cnt; // tag 2
			public Int64 combo_cnt {
				get { return _combo_cnt; }
				set { base.has_field.set_field (2, true); _combo_cnt = value; }
			}
			public bool HasCombo_cnt {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.id = base.deserialize.read_string ();
						break;
					case 1:
						this.score = base.deserialize.read_integer ();
						break;
					case 2:
						this.combo_cnt = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.id, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.score, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.combo_cnt, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class sync_swap_block {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private block_info _block1; // tag 0
			public block_info block1 {
				get { return _block1; }
				set { base.has_field.set_field (0, true); _block1 = value; }
			}
			public bool HasBlock1 {
				get { return base.has_field.has_field (0); }
			}

			private block_info _block2; // tag 1
			public block_info block2 {
				get { return _block2; }
				set { base.has_field.set_field (1, true); _block2 = value; }
			}
			public bool HasBlock2 {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.block1 = base.deserialize.read_obj<block_info> ();
						break;
					case 1:
						this.block2 = base.deserialize.read_obj<block_info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.block1, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.block2, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class sync_up_row {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


	}


	public class touch_top {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class up_row {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}


public class Protocol : ProtocolBase {
	public static  Protocol Instance = new Protocol();
	private Protocol() {
		Protocol.SetProtocol<game_auth> (game_auth.Tag);
		Protocol.SetRequest<SprotoType.game_auth.request> (game_auth.Tag);
		Protocol.SetResponse<SprotoType.game_auth.response> (game_auth.Tag);

		Protocol.SetProtocol<game_over> (game_over.Tag);
		Protocol.SetRequest<SprotoType.game_over.request> (game_over.Tag);

		Protocol.SetProtocol<game_ready> (game_ready.Tag);
		Protocol.SetRequest<SprotoType.game_ready.request> (game_ready.Tag);

		Protocol.SetProtocol<game_start> (game_start.Tag);
		Protocol.SetRequest<SprotoType.game_start.request> (game_start.Tag);

		Protocol.SetProtocol<init_data> (init_data.Tag);
		Protocol.SetRequest<SprotoType.init_data.request> (init_data.Tag);
		Protocol.SetResponse<SprotoType.init_data.response> (init_data.Tag);

		Protocol.SetProtocol<login> (login.Tag);
		Protocol.SetRequest<SprotoType.login.request> (login.Tag);
		Protocol.SetResponse<SprotoType.login.response> (login.Tag);

		Protocol.SetProtocol<match> (match.Tag);
		Protocol.SetRequest<SprotoType.match.request> (match.Tag);
		Protocol.SetResponse<SprotoType.match.response> (match.Tag);

		Protocol.SetProtocol<match_success> (match_success.Tag);
		Protocol.SetRequest<SprotoType.match_success.request> (match_success.Tag);

		Protocol.SetProtocol<match_timeout> (match_timeout.Tag);
		Protocol.SetRequest<SprotoType.match_timeout.request> (match_timeout.Tag);

		Protocol.SetProtocol<match_wrong> (match_wrong.Tag);
		Protocol.SetRequest<SprotoType.match_wrong.request> (match_wrong.Tag);

		Protocol.SetProtocol<new_row> (new_row.Tag);
		Protocol.SetRequest<SprotoType.new_row.request> (new_row.Tag);
		Protocol.SetResponse<SprotoType.new_row.response> (new_row.Tag);

		Protocol.SetProtocol<ping> (ping.Tag);
		Protocol.SetRequest<SprotoType.ping.request> (ping.Tag);
		Protocol.SetResponse<SprotoType.ping.response> (ping.Tag);

		Protocol.SetProtocol<score> (score.Tag);
		Protocol.SetRequest<SprotoType.score.request> (score.Tag);
		Protocol.SetResponse<SprotoType.score.response> (score.Tag);

		Protocol.SetProtocol<swap_block> (swap_block.Tag);
		Protocol.SetRequest<SprotoType.swap_block.request> (swap_block.Tag);
		Protocol.SetResponse<SprotoType.swap_block.response> (swap_block.Tag);

		Protocol.SetProtocol<sync_new_row> (sync_new_row.Tag);
		Protocol.SetRequest<SprotoType.sync_new_row.request> (sync_new_row.Tag);

		Protocol.SetProtocol<sync_score> (sync_score.Tag);
		Protocol.SetRequest<SprotoType.sync_score.request> (sync_score.Tag);

		Protocol.SetProtocol<sync_swap_block> (sync_swap_block.Tag);
		Protocol.SetRequest<SprotoType.sync_swap_block.request> (sync_swap_block.Tag);

		Protocol.SetProtocol<sync_up_row> (sync_up_row.Tag);
		Protocol.SetRequest<SprotoType.sync_up_row.request> (sync_up_row.Tag);

		Protocol.SetProtocol<touch_top> (touch_top.Tag);
		Protocol.SetRequest<SprotoType.touch_top.request> (touch_top.Tag);
		Protocol.SetResponse<SprotoType.touch_top.response> (touch_top.Tag);

		Protocol.SetProtocol<up_row> (up_row.Tag);
		Protocol.SetRequest<SprotoType.up_row.request> (up_row.Tag);
		Protocol.SetResponse<SprotoType.up_row.response> (up_row.Tag);

	}

	public class game_auth {
		public const int Tag = 16;
	}

	public class game_over {
		public const int Tag = 50;
	}

	public class game_ready {
		public const int Tag = 26;
	}

	public class game_start {
		public const int Tag = 27;
	}

	public class init_data {
		public const int Tag = 25;
	}

	public class login {
		public const int Tag = 17;
	}

	public class match {
		public const int Tag = 18;
	}

	public class match_success {
		public const int Tag = 19;
	}

	public class match_timeout {
		public const int Tag = 20;
	}

	public class match_wrong {
		public const int Tag = 21;
	}

	public class new_row {
		public const int Tag = 32;
	}

	public class ping {
		public const int Tag = 1;
	}

	public class score {
		public const int Tag = 34;
	}

	public class swap_block {
		public const int Tag = 28;
	}

	public class sync_new_row {
		public const int Tag = 33;
	}

	public class sync_score {
		public const int Tag = 35;
	}

	public class sync_swap_block {
		public const int Tag = 29;
	}

	public class sync_up_row {
		public const int Tag = 31;
	}

	public class touch_top {
		public const int Tag = 40;
	}

	public class up_row {
		public const int Tag = 30;
	}

}